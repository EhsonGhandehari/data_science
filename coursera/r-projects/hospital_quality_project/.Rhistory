Saves = mean(Saves))%>%mutate(~var=colnames())
worldcup %>%
select(Time, Passes, Tackles, Saves) %>%
summarize(Time = mean(Time),
Passes = mean(Passes),
Tackles = mean(Tackles),
Saves = mean(Saves))%>%mutate(var="gooz")
submit()
submit()
submit()
submit()
worldcup %>%
select(Time, Passes, Tackles, Saves) %>%
summarize(Time = mean(Time),
Passes = mean(Passes),
Tackles = mean(Tackles),
Saves = mean(Saves))
worldcup %>%
select(Time, Passes, Tackles, Saves) %>%
summarize(Time = mean(Time),
Passes = mean(Passes),
Tackles = mean(Tackles),
Saves = mean(Saves))%>%arrange(var=colname(),mean)
worldcup %>%
select(Time, Passes, Tackles, Saves) %>%
summarize(Time = mean(Time),
Passes = mean(Passes),
Tackles = mean(Tackles),
Saves = mean(Saves))%>%arrange(var=colnames(),mean)
worldcup %>%
select(Time, Passes, Tackles, Saves) %>%
summarize(Time = mean(Time),
Passes = mean(Passes),
Tackles = mean(Tackles),
Saves = mean(Saves))%>%arrange(.,var=colnames(),mean)
worldcup %>%
select(Time, Passes, Tackles, Saves) %>%
summarize(Time = mean(Time),
Passes = mean(Passes),
Tackles = mean(Tackles),
Saves = mean(Saves))%>%arrange(~,var=colnames(),mean)
worldcup %>%
select(Time, Passes, Tackles, Saves) %>%
summarize(Time = mean(Time),
Passes = mean(Passes),
Tackles = mean(Tackles),
Saves = mean(Saves))%>%spread(colnames(),value)
worldcup %>%
select(Time, Passes, Tackles, Saves) %>%
summarize(Time = mean(Time),
Passes = mean(Passes),
Tackles = mean(Tackles),
Saves = mean(Saves))%>%spread(colnames(),value)
submit()
wc_3 <- worldcup %>%
select(Time, Passes, Tackles, Saves) %>%
summarize(Time = mean(Time),
Passes = mean(Passes),
Tackles = mean(Tackles),
Saves = mean(Saves))
wc_3
wc_3<-data.frame(var=colnames(wc3),mean=wc_3[1,])
wc_3<-data.frame(var=colnames(wc_3),mean=wc_3[1,])
wc_3
wc_3 <- worldcup %>%
select(Time, Passes, Tackles, Saves) %>%
summarize(Time = mean(Time),
Passes = mean(Passes),
Tackles = mean(Tackles),
Saves = mean(Saves))
wc_3
rownames(wc_3)<-"mean"
wc_3
wc_3<-data.freame(colnames(wc_3),wc_3$mean)
wc_3<-data.frame(colnames(wc_3),wc_3$mean)
skip()
submit()
submit()
submit()
skip()
library(dplyr)
# From http://stackoverflow.com/questions/1181060
stocks <- data_frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
stocks
gather(stocks, stock, price, -time)
submit()
skip()
skip()
skip()
x<-"Hello World!"
x
paste("Square","Circle","Triangle")
paste("Square","Circle","Triangle",sep="+")
paste0("Square","Circle","Triangle")
shapes<-c("Square","Circile","Triangle")
shapes<-c("Square","Circle","Triangle")
paste("My favorite shape is a", shapes)
paste(shapes,collapse=" ")
nchar("Count Me!")
cases<-c("CAPS","low","Title")
toupper(cases)
tolower(cases)
regular_expression<-"a"
string_to_search<-"Maryland"
grepl(regular_expression,string_to_search)
grepl("ryla", "Maryland")
grepl("Marly", "Maryland")
head(state.name)
Enter grepl(".", "Maryland")
grepl(".", "Maryland")
grepl(".", " ")
grepl(".", "")
grepl("a.b",c("aaa", "aab", "abb", "acadb"))
grepl("a+","Maryland")
grepl("x*","Maryland")
grepl("s{2}","Mississippi")
grepl("i{2,3}","Mississippi")
grepl("(iss){2}","Mississippi")
grepl("\\d", "0123456789")
grepl("\\D", "0123456789")
grepl("[aioue]","rythms")
grepl("[aeiou]","rythms")
grepl("[aeiou]","rhythms")
grep("\\.","http://www.jhsph.edu/")
grepl("\\.","http://www.jhsph.edu/")
grepl("^a", c("bab", "aab"))
grepl("$b", c("bab", "aab"))
grepl("$b", c("bab", "aab"))
grepl("$b", c("bab", "aab"))
grepl("..$b", c("bab", "aab"))
info()
play()
nxt()
skip()
grepl("a|b", c("abc", "bcd", "cde"))
start_end_vowel <- "^[AEIOU]{1}.+[aeiou]{1}$"
vowel_state_lgl <-grepl(start_end_vowel, state.name)
state.name[vowel_state_lgl]
grepl("[Ii]", c("Hawaii", "Illinois",
| "Kentucky"))
grepl("[Ii]", c("Hawaii", "Illinois","Kentucky"))
grep("[Ii]", c("Hawaii", "Illinois","Kentucky"))
sub("[Ii]", "1", c("Hawaii", "Illinois", "Kentucky"))
gsub("[Ii]", "1", c("Hawaii", "Illinois", "Kentucky"))
state.name[grep("ss", state.name)]
two_s<-state.name[grep("ss", state.name)]
two_s
strsplit(two_s,"ss")
str_extract("Camaro Z28", "[0-9]+")
str_order(c("p", "e", "n", "g"))
str_pad("Thai", width = 8, side = "left", pad = "-")
str_to_title(c("CAPS", "low", "Title"))
str_trim(" trim me "
)
word("See Spot run.", 2)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evalute(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[end]}, c(8, 4, 0))
evaluate(function(x){x[-1]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telgram("mother fucker")
telegram("mother fucker")
submit()
mad_libs("gooz","chis","chos")
quit()
library(swirl)
swirl
swirl()
map_chr(c(5, 3, 4), int_to_string)
map_lgl(gt(c(1, 2, 3, 4, 5),3))
skip()
map_if(c(1,2,3,4),is_even(),squre())
skip()
map_at(c(4, 6, 2, 3, 8),c(1,3,4),square)
map2_chr(1:26,letters,paste)
map2_chr(letters,1:26,paste)
reduce(c(1,3,5,7),add_talk)
reduce(c("a", "b", "c", "d"),paste_talk)
reduce_right(c("a", "b", "c", "d"),paste_talk)
contains(random_ints,45)
detect(random_ints,is_even)
detect_index(random_ints,is_even)
keep(random_ints,is_even)
discard(random_ints,is_even)
every(random_ints,x<100)
every(random_ints,function(x) {x<100})
partial(gt_10(x){x>10},x)
partial(function(x){x>10},x)
gt_10 <- partial(gt, b = 10)
gt_10(11)
walk(mark_antony,message)
ls
b<-2
ls()
b%in%list(ls())
"b"%in%list(ls())
source('~/Documents/github/data_science/coursera/r-projects/hospital_quality_project/best.R')
source('~/Documents/github/data_science/coursera/r-projects/hospital_quality_project/best.R')
best("TX", "heart attack")
best("TX", "heart attack")
source('~/Documents/github/data_science/coursera/r-projects/hospital_quality_project/best.R')
best("TX", "heart attack")
best("TX", "heart attack")
source('~/Documents/github/data_science/coursera/r-projects/hospital_quality_project/best.R')
best("TX", "heart attack")
best("TX", "heart attack")
source('~/Documents/github/data_science/coursera/r-projects/hospital_quality_project/best.R')
best("TX", "heart attack")
best("TX", "heart attack")
"outcome"%in%list(ls())
ls()
class(outcome)
outcome%in%list(ls())
c(ls())
class(c(ls()))
"outcome"%in%c(ls())
source('~/Documents/github/data_science/coursera/r-projects/hospital_quality_project/best.R')
source('~/Documents/github/data_science/coursera/r-projects/hospital_quality_project/best.R')
best("TX", "heart attack")
best("TX", "heart attack")
"outcome"%in%c(ls())
ls()
class(ls())
!("outcome"%in%ls())
source('~/Documents/github/data_science/coursera/r-projects/hospital_quality_project/best.R')
best("TX", "heart attack")
best("TX", "heart attack")
"outcome"%in%ls()
source('~/Documents/github/data_science/coursera/r-projects/hospital_quality_project/best.R')
best("TX", "heart attack")
objects()
class(objects)
c(objects())
class(c(objects()))
source('~/Documents/github/data_science/coursera/r-projects/hospital_quality_project/best.R')
best("TX", "heart attack")
best("TX", "heart attack")
stored_objects<-objects()
stored_objects
class(stored_objects)
source('~/Documents/github/data_science/coursera/r-projects/hospital_quality_project/best.R')
best("TX", "heart attack")
best("TX", "heart attack")
"outcome"%in%stored_objects
source('~/Documents/github/data_science/coursera/r-projects/hospital_quality_project/rankhospital.R')
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
State<-"MD"
disease="heart attack"
data<-subset(outcome, State==state)
state<-"MD"
data<-subset(outcome, State==state)
data<-data.frame(Hospital.Name=data$Hospital.Name,Disease=data[,i])
i=11
data<-data.frame(Hospital.Name=data$Hospital.Name,Disease=data[,i])
result<-arrange(data,Disease,Hospital.Name)
View(result)
result<-arrange(data,Disease,Hospital.Name)
result<-subset(result,is.na(Disease)==FALSE)
View(result)
source('~/Documents/github/data_science/coursera/r-projects/hospital_quality_project/rankhospital.R')
rankhospital("MD", "heart attack", "worst")
result[-1]
result$Hospital.Name[rank]
result$Hospital.Name[-1]
as.character(result$Hospital.Name)[rank]
as.character(result$Hospital.Name)
as.character(result$Hospital.Name)[1]
as.character(result$Hospital.Name)[-1]
rankhospital("MD", "heart attack", "worst")
source('~/Documents/github/data_science/coursera/r-projects/hospital_quality_project/rankhospital.R')
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcome[, 11] <- as.numeric(outcome[, 11])
outcome[ ,17] <- as.numeric(outcome[, 17])
outcome[ ,23] <- as.numeric(outcome[, 23])
data<-outcome
save(data,"")
getwd()
save(data,"data.RData")
save(data,file="data.RData")
ls()
remove(list(ls()))
remove(list(ls())
remove(ls())
remove(list(ls()))
remove(data)
remove(outcome)
load("data.RData")
view(data)
View(data)
source('~/Documents/github/data_science/coursera/r-projects/hospital_quality_project/best.R')
best("MD", "pneumonia")
remove(data)
best("MD", "pneumonia")
data
m<-load("data.RData")
remove(data)
remove(m)
rankhospital("MN", "heart attack", 5000)
source('~/Documents/github/data_science/coursera/r-projects/hospital_quality_project/rankhospital.R')
rankhospital("MN", "heart attack", 5000)
# loading or installing the necessary packages:
if(!require("magrittr")) {
message("installing the 'magrittr' package")
install.packages("magrittr")
}
if(!require("dplyr")) {
message("installing the 'dplyr' package")
install.packages("dplyr")
}
if(!require("plyr")) {
message("installing the 'plyr' package")
install.packages("plyr")
}
# Checking if the the dataset is already loaded:
# This is what I have so far, I need to change the code when I make a package
address<-system("find /Users -name hospital_quality_report_EMG.Rmd",
intern=TRUE)
length1<-nchar(address)
length2<-nchar("hospital_quality_report_EMG.Rmd")+1
address<-paste0(strtrim(address, length1-length2)[1])
setwd(address)
load("data.RData")
# Testing the quality and validity/structure of data.
if (!(toupper(state) %in% state.abb)) { stop("Invalid state.")}
if (!is.character(disease)) { stop("invalid outcome")}
if (!(tolower(disease) %in% c("heart attack","heart failure", "pneumonia"))) {
stop("invalid outcome")
}
# Selecting the right column from data based on the disease.
disease=tolower(disease)
if (disease=="heart attack") {i=11
} else if (disease=="heart failure") {i=17
} else {i=23}
if (tolower(rank)=="best") {rank=1L}
data<-data.frame(Hospital.Name=data$Hospital.Name,
State=data$State,Disease=data[,i])
i=11
# loading or installing the necessary packages:
if(!require("magrittr")) {
message("installing the 'magrittr' package")
install.packages("magrittr")
}
if(!require("dplyr")) {
message("installing the 'dplyr' package")
install.packages("dplyr")
}
if(!require("plyr")) {
message("installing the 'plyr' package")
install.packages("plyr")
}
# Checking if the the dataset is already loaded:
# This is what I have so far, I need to change the code when I make a package
address<-system("find /Users -name hospital_quality_report_EMG.Rmd",
intern=TRUE)
length1<-nchar(address)
length2<-nchar("hospital_quality_report_EMG.Rmd")+1
address<-paste0(strtrim(address, length1-length2)[1])
setwd(address)
load("data.RData")
# Testing the quality and validity/structure of data.
if (!(toupper(state) %in% state.abb)) { stop("Invalid state.")}
if (!is.character(disease)) { stop("invalid outcome")}
if (!(tolower(disease) %in% c("heart attack","heart failure", "pneumonia"))) {
stop("invalid outcome")
}
# Selecting the right column from data based on the disease.
disease=tolower(disease)
if (disease=="heart attack") {i=11
} else if (disease=="heart failure") {i=17
} else {i=23}
if (tolower(rank)=="best") {rank=1L}
data<-data.frame(Hospital.Name=data$Hospital.Name,
State=data$State,Disease=data[,i])
state="CA"
# loading or installing the necessary packages:
if(!require("magrittr")) {
message("installing the 'magrittr' package")
install.packages("magrittr")
}
if(!require("dplyr")) {
message("installing the 'dplyr' package")
install.packages("dplyr")
}
if(!require("plyr")) {
message("installing the 'plyr' package")
install.packages("plyr")
}
# Checking if the the dataset is already loaded:
# This is what I have so far, I need to change the code when I make a package
address<-system("find /Users -name hospital_quality_report_EMG.Rmd",
intern=TRUE)
length1<-nchar(address)
length2<-nchar("hospital_quality_report_EMG.Rmd")+1
address<-paste0(strtrim(address, length1-length2)[1])
setwd(address)
load("data.RData")
# Testing the quality and validity/structure of data.
if (!(toupper(state) %in% state.abb)) { stop("Invalid state.")}
if (!is.character(disease)) { stop("invalid outcome")}
if (!(tolower(disease) %in% c("heart attack","heart failure", "pneumonia"))) {
stop("invalid outcome")
}
# Selecting the right column from data based on the disease.
disease=tolower(disease)
if (disease=="heart attack") {i=11
} else if (disease=="heart failure") {i=17
} else {i=23}
if (tolower(rank)=="best") {rank=1L}
data<-data.frame(Hospital.Name=data$Hospital.Name,
State=data$State,Disease=data[,i])
View(data)
result<-ddply(.(State))
result<-ddply(.(State),summarize(order(Disease,Hospital.Name)))
result<-ddply(data, .(State))
View(result)
data<-subset(data,is.na(Disease)==FALSE)
View(data)
result<-ddply(data, .(State))
View(result)
result<-ddply(data, .(State),summarize(order(Disease,Hospital.Name)))
result<-ddply(data, .(State),summarize(order(data, Disease,Hospital.Name)))
result<-ddply(data, .(State,Disease),summarize(order(Disease,Hospital.Name)))
result<-order(data,State,Disease,Hospital.Name)
View(data)
result<-arrange(data,State,Disease,Hospital.Name)
View(result)
sapply(State,function(x) as.character(x$Hospital.Name)[1])
with(result, sapply(State,function(x) as.character(x$Hospital.Name)[1]))
with(result,saaply(State, function(x) print(x)))
with(result,sapply(State, function(x) print(x)))
source('~/Documents/github/data_science/coursera/r-projects/hospital_quality_project/rankall.R')
head(rankall("heart attack", 20), 10)
source('~/Documents/github/data_science/coursera/r-projects/hospital_quality_project/rankall.R')
head(rankall("heart attack", 20), 10)
head(rankall("heart attack", 20), 10)
source('~/Documents/github/data_science/coursera/r-projects/hospital_quality_project/rankall.R')
head(rankall("heart attack", 20), 10)
source('~/Documents/github/data_science/coursera/r-projects/hospital_quality_project/rankall.R')
head(rankall("heart attack", 20), 10)
source('~/Documents/github/data_science/coursera/r-projects/hospital_quality_project/rankall.R')
source('~/Documents/github/data_science/coursera/r-projects/hospital_quality_project/rankall.R')
head(rankall("heart attack", 20), 10)
result2<-data.frame()
View(result2)
result2<-data.frame(hospital="here",state="here")
View(result2)
source('~/Documents/github/data_science/coursera/r-projects/hospital_quality_project/rankall.R')
head(rankall("heart attack", 20), 10)
source('~/Documents/github/data_science/coursera/r-projects/hospital_quality_project/rankall.R')
head(rankall("heart attack", 20), 10)
source('~/Documents/github/data_science/coursera/r-projects/hospital_quality_project/rankall.R')
source('~/Documents/github/data_science/coursera/r-projects/hospital_quality_project/rankall.R')
head(rankall("heart attack", 20), 10)
states_ordered=order(state.abb)
states_ordered=arrange(state.abb)
states_ordered=arrange(state.abb)
state.abb
class(state.abb)
states_ordered=as.factor(state.abb)
states_ordered
states_ordered=as.factor(state.abb,ordered=is.ordered(state.abb))
states_ordered=as.factor(state.abb,ordered=as.ordered(state.abb))
states_ordered=sort(state.abb)
result2<-data.frame(hospital=character(0),state=character(0))
results2[1,1]="gooz"
source('~/Documents/github/data_science/coursera/r-projects/hospital_quality_project/rankall.R')
head(rankall("heart attack", 20), 10)
states_orderes
states_ordered
"DE" %in% states_abb
"DE" %in% states.abb
"DE" %in% state.abb
states_ordered=sort(unique(data$State))
states_ordered
source('~/Documents/github/data_science/coursera/r-projects/hospital_quality_project/rankall.R')
head(rankall("heart attack", 20), 10)
source('~/Documents/github/data_science/coursera/r-projects/hospital_quality_project/rankall.R')
head(rankall("heart attack", 20), 10)
source('~/Documents/github/data_science/coursera/r-projects/hospital_quality_project/rankall.R')
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
source('~/Documents/github/data_science/coursera/r-projects/hospital_quality_project/rankall.R')
tail(rankall("pneumonia", "worst"), 3)
ail(rankall("heart failure"), 10)
tail(rankall("heart failure"), 10)
